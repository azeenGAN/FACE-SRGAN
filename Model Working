#Backend working:

from google.colab import drive drive.mount('/content/drive')
# Commented out IPython magic to ensure Python compatibility. import pandas as pd
import numpy as np
import matplotlib.pyplot as plt from tqdm import tqdm_notebook # %matplotlib inline
!pip install tensorflow_addons import tensorflow_addons as tfa

import tensorflow
print (tensorflow. version )
import tensorflow.keras as keras from keras.models import load_model

from PIL import Image import numpy as np
# Load the GAN model from the saved file
generator_network = load_model('/content/drive/MyDrive/lr2hr_generator.h5')
generator_network.compile(loss=['binary_crossentropy', 'mse'], loss_weights=[0.001, 1], optimizer=adam_optimizer)

adam_optimizer = tensorflow.keras.optimizers.legacy.Adam(learning_rate=0.0002, beta_1=0.5)
#declaring show_test_result function to get image and output our results
def show_test_results(generator_network): #files = np.random.choice(new_test, size=1) #low_quality_images = [] #high_quality_images = []
#for file in files:
img = cv2.imread('/content/drive/MyDrive/070868.jpg') img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img2 = cv2.resize(img, (256, 256))
img3 = cv2.resize(img, (64, 64)) low_quality_images=(img3-127.5)/127.5 print(low_quality_images.shape) high_quality_images=(img2-127.5)/127.5 print(high_quality_images.shape) low_quality_images = np.array(low_quality_images) print(low_quality_images.shape)
high_quality_images = np.array(high_quality_images) print(high_quality_images.shape)
low_quality_images = low_quality_images.reshape((1, 64, 64, 3))

fake_high_quality_images = generator_network.predict(low_quality_images)

# print ("Real quality input images")
# plt.imshow((high_quality_images+1.0)/2.0) # plt.axis('off')
# plt.show()

low_quality_images=np.squeeze(low_quality_images,axis=0) print ("Low quality input images") plt.imshow((low_quality_images+1.0)/2.0)
plt.axis('off') plt.show()
fake_high_quality_images=np.squeeze(fake_high_quality_images,axis=0)
print ("Generated high quality images") plt.imshow((fake_high_quality_images+1.0)/2.0) plt.axis('off')

plt.show() print(fake_high_quality_images.shape)
import cv2 show_test_results(generator_network) print ("-"*100)
print ("-"*100)
